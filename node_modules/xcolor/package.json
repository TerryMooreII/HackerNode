{
  "name": "xcolor",
  "version": "0.1.0",
  "author": {
    "name": "Charles Moncrief",
    "email": "cmoncrief@gmail.com"
  },
  "description": "Extended colors and markup for the terminal",
  "main": "lib/xcolor.js",
  "scripts": {
    "prepublish": "cake build",
    "test": "cake test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/cmoncrief/xcolor.git"
  },
  "keywords": [
    "color",
    "ansi",
    "terminal",
    "xterm256",
    "256",
    "xterm",
    "console",
    "cli"
  ],
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.8.1",
    "coffee-script": "~1.4.0"
  },
  "engines": {
    "node": "*"
  },
  "readme": "# xcolor\n\nxcolor provides extended color support and string markup for Node.js console applications.\n\n### Features\n\n* Simple mustache-style markup for applying colors\n* 256 colors in the terminal\n* CSS color names supported\n* Hex code conversion\n* Graceful degradation for Windows and other non-256 terminals\n* Set custom style combinations\n* Load custom styles from a file\n* Alternate mini-syntax for basic colors\n* Log directly to the console or just format a string\n\n## Installation\n\nInstall using npm:\n\n    $ npm install xcolor\n\n## Examples\n\n    var xcolor = require('xcolor')\n\n    // Simple colors\n    xcolor.log('{{cyan}}Simple cyan text{{/color}}')\n    xcolor.log('{{red}}Red{{/red}} {{green}}Green{{/green}} {{blue}}Blue{{//blue}}')\n    xcolor.log('{{bg red}}{{black}}Black on red text{{/color}}')\n\n    // Extended html colors\n    xcolor.log('{{salmon}}Salmon colored text{{/salmon}}')\n    xcolor.log('{{snowWhite}}Winter {{mediumSpringGreen}}Spring {{maroon}}Summer {{orange}}Fall')\n    xcolor.log('{{bg midnightblue}}{{cornsilk}}Cornsilk on midnight blue text{{/color}}')\n\n    // Styles\n    xcolor.log('{{bold}}Bold text{{/bold}}')\n    xcolor.log('{{underline}}Underlined text{{/underline}}')\n    xcolor.log('{{inverse}}Inverted text{{/inverse}}')\n    xcolor.log('{{underline}}{{goldenrod}}Underlined goldenrod text{{/color}}')\n    xcolor.log('{{inverse}}{{fuchsia}}Inverted fuschia text{{/color}}')\n\n    // Hex colors\n    xcolor.log('{{#32CD32}}Lime green text')\n    xcolor.log('{{#78D5E3}}Teal text')\n    xcolor.log('{{bg #6A5ACD}}Slate blue background text')\n\n    // Xterm 256 colors\n    xcolor.log('{{93}}Purple text')\n    xcolor.log('{{bg 130}}Brown background text')\n\n    // Custom styles\n    xcolor.addStyle({intense: ['bold', 'underline', 'tomato']})\n    xcolor.log('{{.intense}}Intense bold underlined tomato colored text!{{/color}}')\n\n    // Mini syntax templates\n    xcolor.log('&+gGreen, &+Gbright green &+yand &+Yyellow text')\n    xcolor.log('&=CWWhite on cyan text')\n\n    // Printf-style args work\n    xcolor.log('{{blue}}%d is a blue %s.', 123, 'number')\n\n    // Format a string without logging it\n    msg = xcolor('{{green}}Format me!{{/green}}')\n\n## Markup syntax\n\nColor and style commands are wrapped inside of double curly braces and can be used anywhere inside of a string. Colors are always reset when switching to a new one, but styles must be explicitly reset with a closing tag. All strings are reset at the end of the line automatically. Use `{{/color}}` to clear all styles.\n\n    xcolor.log('This {{blue}}string {{red}}has many {{bold}}colors and{{/bold}} styles{{/color}}!')\n\n## Basic colors\n\nThe 8 basic colors along with their bright counterparts are all supported. Prefix the color command with `bg` to change the background instead of the foreground.\n\n`white`,`black`,`blue`,`cyan`,`green`,`magenta`,`red`,`yellow`,`brightBlack`,`brightRed`,`brightGreen`, `brightYellow`,`brightBlue`,`brightMagenta`,`brightCyan`,`brightWhite`\n\n    xcolor.log('{{white}}This is white {{blue}}and this is blue.')\n    xcolor.log('This string has {{bg blue}}blue background{{/color}} text.')\n\n## CSS colors\n\nAll 147 CSS color names are also supported. When used, these colors will be converted to the closest Xterm-256 matching color. See the [Wikipedia article](http://en.wikipedia.org/wiki/Web_colors) for the complete list of supported color names. Prefix the color command with `bg` to change the background instead of the foreground.\n\n    xcolor.log('{{purple}}This is purple and {{cornflowerBlue}}cornflower blue text.')\n    xcolor.log('{{bg fuchsia}}{{whiteSmoke}}This is white smoke text on fuchsia.'')\n\n# Hex colors\n\nColors can also be specified in hex-code format, which will be converted to the closest Xterm-256 matching color. Prefix the color command with `bg` to change the background instead of the foreground.\n\n     xcolor.log('{{#EA7E5D}}This is burnt sienna text')\n     xcolor.log('This string has {{bg #E0B0FF}}mauve background{{/color}} text.')\n\n## Xterm 256\n\nIf you already know the exact Xterm-256 color you'd like to use, you can access it directly as well. Prefix the color command with `bg` to change the background instead of the foreground.\n\n    xcolor.log('{{172}}This is orange text')\n    xcolor.log('{{bg 172}}{{255}}This is white text on an orange background')\n\n## Degradation\n\nWhen used under Windows or on any other terminal that does not identify itself as `xterm-256color`, all extended colors will automatically degrade to the closest basic colors.\n\n## Text styles\n\n`Bold`, `underline` and `inverse` text are all supported and can be used in any combination with other styles and color. To clear a style, prefix the name with a forward slash.\n\n    xcolor.log('This is {{bold}}bold{{//bold}} and now {{underline}}underlined{{/underline}} text')\n    xcolor.log('{{inverse}}{{goldenrod}}This is inverted goldenrod text')\n\n## Custom styles\n\nMix and match styles, foreground colors and background colors to create custom styles. This is also helpful for defining a palette for your application that can easily be changed in one place.\n\nCustom styles are defined via an object hash that contains the name of the style as the key with either a single valid keyword or an array of them as the value. Any of the color code types used in the examples above can be used to create a custom style. They can then be accessed in your string templates by prefacing the name of the style with a `.`.\n\n     xcolor.addStyle({emphasis: ['bold', 'crimson', 'underline']})\n     xcolor.log('{{.emphasis}}This is emphatic bold, crimson and underlined text.')\n\n## Custom style files\n\nCustom styles can be stored in a JSON file and loaded when needed. The JSON file should follow the same syntax as above, and can support as many unique custom styles per file as desired.\n\n##### Example file:\n\n    {\n      \"color1\" : [\"bold\", \"olive\"],\n      \"color2\" : [\"underline\", \"seaGreen\"]\n      \"color3\" : [\"#EA7E5D\"]\n    }\n\n##### Usage:\n\n    xcolor.loadStyles('/path/to/styles.json')\n    xcolor.log('{{.color1}}Bold olive {{.color2}}underlined sea green {{.color3}} burnt sienna!')\n\n## Mini syntax\n\nThe mini color change syntax can come in handy when horizontal space is at a premium and several color changes within a string are required. Inspired by the ansi markup syntax used on [MUDs](http://en.wikipedia.org/wiki/MUD).\n\nThe mini codes have the following syntax:\n\n* `&+`  - Sets the foreground. Lower case letters are normal, upper case are bright.\n* `&=`  - Sets the background and foreground.\n* `&n`  - Resets all colors.\n\nOnly the basic colors and their bright variants are available with this syntax;\n\n* `w`: white\n* `l`: black\n* `r`: red\n* `g`: green\n* `b`: blue\n* `m`: magenta\n* `c`: cyan\n* `y`: yellow\n\n##### Example:\n\n    xcolor.log('This is &+rred, &+Gbright green &+band blue.')\n    xcolor.log('&=rwThis ia white text on an orange background')\n\n## Running the tests\n\nTo run the test suite, invoke the following commands in the repository:\n\n    $ npm install\n    $ npm test\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Charles Moncrief <<cmoncrief@gmail.com>>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cmoncrief/xcolor/issues"
  },
  "_id": "xcolor@0.1.0",
  "dist": {
    "shasum": "414cc1704d4e7f63d7646d5d53d09e6ec6beabf7"
  },
  "_from": "xcolor@",
  "_resolved": "https://registry.npmjs.org/xcolor/-/xcolor-0.1.0.tgz"
}
